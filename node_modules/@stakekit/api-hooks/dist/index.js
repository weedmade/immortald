export { ActionListSort, ActionListStatus, ActionListType, ActionStatus, ActionTypes, BalanceTypes, DailyCumulativeStakeDtoStatus, DailyCumulativeStakeDtoType, EvmEIP1559GasArgsDtoType, EvmLegacyGasArgsDtoType, EvmNetworks, FeeConfigurationStatus, GasMode, GeolocationErrorTagsItem, GeolocationErrorType, HealthStatus, KeyCategory, MasterBannedRegionDtoTagsItem, MasterBannedYieldDtoTagsItem, Networks, RewardClaiming, RewardSchedule, RewardTypes, Role, TeamCategory, TeamType, TransactionStatus, TransactionType, TronResourceType, ValidatorStatusTypes, WebhookSubscriptionEventDtoEvent, YieldGetMyYieldsSortBy, YieldGetMyYieldsType, YieldProviders, YieldType, YieldV2YieldsNetwork, YieldV2YieldsRevenueOption, YieldV2YieldsSortBy, YieldV2YieldsType, YieldYieldsRevenueOption, YieldYieldsSortBy, YieldYieldsType } from './chunk-IRWPDFN7.js';
import { useQuery, useMutation } from '@tanstack/react-query';

// src/api-client-config.ts
var StakeKitApiClient = class _StakeKitApiClient {
  static config;
  static configure({
    apiKey,
    baseURL,
    customFetch: customFetch2
  }) {
    _StakeKitApiClient.config = {
      apiKey,
      baseURL: baseURL || "https://api.stakek.it/",
      customFetch: customFetch2
    };
  }
  static getConfig() {
    return _StakeKitApiClient.config;
  }
};

// src/api-client.ts
var getUrl = ({
  baseURL,
  path,
  params
}) => {
  const url = new URL(baseURL);
  url.pathname = path;
  if (params) {
    const urlSearchParams = new URLSearchParams();
    Object.keys(params).forEach((key) => {
      const val = params[key];
      if (val === void 0 || val === null || val === "")
        return;
      urlSearchParams.append(key, params[key]);
    });
    url.search = urlSearchParams.toString();
  }
  return url.toString();
};
var customFetch = async ({
  url,
  data,
  method,
  params,
  headers,
  signal
}) => {
  const { apiKey, baseURL, customFetch: customFetch2 } = StakeKitApiClient.getConfig();
  const fetchInstance = customFetch2 || fetch;
  const response = await fetchInstance(getUrl({ baseURL, path: url, params }), {
    method,
    headers: { ...headers, "X-API-KEY": apiKey },
    signal,
    ...data && { body: JSON.stringify(data) }
  });
  if (response.ok) {
    return response.json();
  }
  return Promise.reject(response);
};

// src/api/index.ts
var healthHealthV2 = (signal) => {
  return customFetch({
    url: `/v2/health`,
    method: "GET",
    signal
  });
};
var getHealthHealthV2QueryKey = () => {
  return [`/v2/health`];
};
var getHealthHealthV2QueryOptions = (options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getHealthHealthV2QueryKey();
  const queryFn = ({
    signal
  }) => healthHealthV2(signal);
  return { queryKey, queryFn, ...queryOptions };
};
var useHealthHealthV2 = (options) => {
  const queryOptions = getHealthHealthV2QueryOptions(options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var actionGetAction = (actionId, signal) => {
  return customFetch({
    url: `/v1/actions/${actionId}`,
    method: "GET",
    signal
  });
};
var getActionGetActionQueryKey = (actionId) => {
  return [`/v1/actions/${actionId}`];
};
var getActionGetActionQueryOptions = (actionId, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getActionGetActionQueryKey(actionId);
  const queryFn = ({
    signal
  }) => actionGetAction(actionId, signal);
  return {
    queryKey,
    queryFn,
    enabled: !!actionId,
    ...queryOptions
  };
};
var useActionGetAction = (actionId, options) => {
  const queryOptions = getActionGetActionQueryOptions(actionId, options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var actionGetGasEstimate = (actionId, signal) => {
  return customFetch({
    url: `/v1/actions/${actionId}/gas-estimate`,
    method: "GET",
    signal
  });
};
var getActionGetGasEstimateQueryKey = (actionId) => {
  return [`/v1/actions/${actionId}/gas-estimate`];
};
var getActionGetGasEstimateQueryOptions = (actionId, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getActionGetGasEstimateQueryKey(actionId);
  const queryFn = ({ signal }) => actionGetGasEstimate(actionId, signal);
  return {
    queryKey,
    queryFn,
    enabled: !!actionId,
    ...queryOptions
  };
};
var useActionGetGasEstimate = (actionId, options) => {
  const queryOptions = getActionGetGasEstimateQueryOptions(actionId, options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var actionEnter = (actionRequestDto) => {
  return customFetch({
    url: `/v1/actions/enter`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: actionRequestDto
  });
};
var getActionEnterMutationOptions = (options) => {
  const { mutation: mutationOptions } = options ?? {};
  const mutationFn = (props) => {
    const { data } = props ?? {};
    return actionEnter(data);
  };
  return { mutationFn, ...mutationOptions };
};
var useActionEnter = (options) => {
  const mutationOptions = getActionEnterMutationOptions(options);
  return useMutation(mutationOptions);
};
var actionExit = (actionRequestDto) => {
  return customFetch({
    url: `/v1/actions/exit`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: actionRequestDto
  });
};
var getActionExitMutationOptions = (options) => {
  const { mutation: mutationOptions } = options ?? {};
  const mutationFn = (props) => {
    const { data } = props ?? {};
    return actionExit(data);
  };
  return { mutationFn, ...mutationOptions };
};
var useActionExit = (options) => {
  const mutationOptions = getActionExitMutationOptions(options);
  return useMutation(mutationOptions);
};
var actionPending = (pendingActionRequestDto) => {
  return customFetch({
    url: `/v1/actions/pending`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: pendingActionRequestDto
  });
};
var getActionPendingMutationOptions = (options) => {
  const { mutation: mutationOptions } = options ?? {};
  const mutationFn = (props) => {
    const { data } = props ?? {};
    return actionPending(data);
  };
  return { mutationFn, ...mutationOptions };
};
var useActionPending = (options) => {
  const mutationOptions = getActionPendingMutationOptions(options);
  return useMutation(mutationOptions);
};
var actionEnterGasEstimation = (actionGasEstimateRequestDto) => {
  return customFetch({
    url: `/v1/actions/enter/estimate-gas`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: actionGasEstimateRequestDto
  });
};
var getActionEnterGasEstimationQueryKey = (actionGasEstimateRequestDto) => {
  return [
    `/v1/actions/enter/estimate-gas`,
    actionGasEstimateRequestDto
  ];
};
var getActionEnterGasEstimationQueryOptions = (actionGasEstimateRequestDto, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getActionEnterGasEstimationQueryKey(actionGasEstimateRequestDto);
  const queryFn = () => actionEnterGasEstimation(actionGasEstimateRequestDto);
  return { queryKey, queryFn, ...queryOptions };
};
var useActionEnterGasEstimation = (actionGasEstimateRequestDto, options) => {
  const queryOptions = getActionEnterGasEstimationQueryOptions(
    actionGasEstimateRequestDto,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var actionExitGasEstimate = (actionGasEstimateRequestDto) => {
  return customFetch({
    url: `/v1/actions/exit/estimate-gas`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: actionGasEstimateRequestDto
  });
};
var getActionExitGasEstimateQueryKey = (actionGasEstimateRequestDto) => {
  return [
    `/v1/actions/exit/estimate-gas`,
    actionGasEstimateRequestDto
  ];
};
var getActionExitGasEstimateQueryOptions = (actionGasEstimateRequestDto, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getActionExitGasEstimateQueryKey(actionGasEstimateRequestDto);
  const queryFn = () => actionExitGasEstimate(actionGasEstimateRequestDto);
  return { queryKey, queryFn, ...queryOptions };
};
var useActionExitGasEstimate = (actionGasEstimateRequestDto, options) => {
  const queryOptions = getActionExitGasEstimateQueryOptions(
    actionGasEstimateRequestDto,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var actionList = (params, signal) => {
  return customFetch({
    url: `/v1/actions`,
    method: "GET",
    params,
    signal
  });
};
var getActionListQueryKey = (params) => {
  return [`/v1/actions`, ...params ? [params] : []];
};
var getActionListQueryOptions = (params, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getActionListQueryKey(params);
  const queryFn = ({
    signal
  }) => actionList(params, signal);
  return { queryKey, queryFn, ...queryOptions };
};
var useActionList = (params, options) => {
  const queryOptions = getActionListQueryOptions(params, options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var actionPendingGasEstimate = (pendingActionGasEstimateRequestDto) => {
  return customFetch({
    url: `/v1/actions/pending/estimate-gas`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: pendingActionGasEstimateRequestDto
  });
};
var getActionPendingGasEstimateQueryKey = (pendingActionGasEstimateRequestDto) => {
  return [
    `/v1/actions/pending/estimate-gas`,
    pendingActionGasEstimateRequestDto
  ];
};
var getActionPendingGasEstimateQueryOptions = (pendingActionGasEstimateRequestDto, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getActionPendingGasEstimateQueryKey(pendingActionGasEstimateRequestDto);
  const queryFn = () => actionPendingGasEstimate(pendingActionGasEstimateRequestDto);
  return { queryKey, queryFn, ...queryOptions };
};
var useActionPendingGasEstimate = (pendingActionGasEstimateRequestDto, options) => {
  const queryOptions = getActionPendingGasEstimateQueryOptions(
    pendingActionGasEstimateRequestDto,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var transactionGetTransaction = (transactionId, signal) => {
  return customFetch({
    url: `/v1/transactions/${transactionId}`,
    method: "GET",
    signal
  });
};
var getTransactionGetTransactionQueryKey = (transactionId) => {
  return [`/v1/transactions/${transactionId}`];
};
var getTransactionGetTransactionQueryOptions = (transactionId, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getTransactionGetTransactionQueryKey(transactionId);
  const queryFn = ({ signal }) => transactionGetTransaction(transactionId, signal);
  return {
    queryKey,
    queryFn,
    enabled: !!transactionId,
    ...queryOptions
  };
};
var useTransactionGetTransaction = (transactionId, options) => {
  const queryOptions = getTransactionGetTransactionQueryOptions(
    transactionId,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var transactionConstruct = (transactionId, constructTransactionRequestDto) => {
  return customFetch({
    url: `/v1/transactions/${transactionId}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: constructTransactionRequestDto
  });
};
var getTransactionConstructMutationOptions = (options) => {
  const { mutation: mutationOptions } = options ?? {};
  const mutationFn = (props) => {
    const { transactionId, data } = props ?? {};
    return transactionConstruct(transactionId, data);
  };
  return { mutationFn, ...mutationOptions };
};
var useTransactionConstruct = (options) => {
  const mutationOptions = getTransactionConstructMutationOptions(options);
  return useMutation(mutationOptions);
};
var transactionSubmit = (transactionId, submitRequestDto) => {
  return customFetch({
    url: `/v1/transactions/${transactionId}/submit`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: submitRequestDto
  });
};
var getTransactionSubmitMutationOptions = (options) => {
  const { mutation: mutationOptions } = options ?? {};
  const mutationFn = (props) => {
    const { transactionId, data } = props ?? {};
    return transactionSubmit(transactionId, data);
  };
  return { mutationFn, ...mutationOptions };
};
var useTransactionSubmit = (options) => {
  const mutationOptions = getTransactionSubmitMutationOptions(options);
  return useMutation(mutationOptions);
};
var transactionSubmitHash = (transactionId, submitHashRequestDto) => {
  return customFetch({
    url: `/v1/transactions/${transactionId}/submit_hash`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: submitHashRequestDto
  });
};
var getTransactionSubmitHashMutationOptions = (options) => {
  const { mutation: mutationOptions } = options ?? {};
  const mutationFn = (props) => {
    const { transactionId, data } = props ?? {};
    return transactionSubmitHash(transactionId, data);
  };
  return { mutationFn, ...mutationOptions };
};
var useTransactionSubmitHash = (options) => {
  const mutationOptions = getTransactionSubmitHashMutationOptions(options);
  return useMutation(mutationOptions);
};
var transactionGetTransactionStatusFromId = (transactionId, signal) => {
  return customFetch({
    url: `/v1/transactions/${transactionId}/status`,
    method: "GET",
    signal
  });
};
var getTransactionGetTransactionStatusFromIdQueryKey = (transactionId) => {
  return [`/v1/transactions/${transactionId}/status`];
};
var getTransactionGetTransactionStatusFromIdQueryOptions = (transactionId, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getTransactionGetTransactionStatusFromIdQueryKey(transactionId);
  const queryFn = ({ signal }) => transactionGetTransactionStatusFromId(transactionId, signal);
  return {
    queryKey,
    queryFn,
    enabled: !!transactionId,
    ...queryOptions
  };
};
var useTransactionGetTransactionStatusFromId = (transactionId, options) => {
  const queryOptions = getTransactionGetTransactionStatusFromIdQueryOptions(
    transactionId,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var transactionGetGasForNetwork = (network, signal) => {
  return customFetch({
    url: `/v1/transactions/gas/${network}`,
    method: "GET",
    signal
  });
};
var getTransactionGetGasForNetworkQueryKey = (network) => {
  return [`/v1/transactions/gas/${network}`];
};
var getTransactionGetGasForNetworkQueryOptions = (network, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getTransactionGetGasForNetworkQueryKey(network);
  const queryFn = ({ signal }) => transactionGetGasForNetwork(network, signal);
  return {
    queryKey,
    queryFn,
    enabled: !!network,
    ...queryOptions
  };
};
var useTransactionGetGasForNetwork = (network, options) => {
  const queryOptions = getTransactionGetGasForNetworkQueryOptions(
    network,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var transactionGetTransactionStatusByNetworkAndHash = (network, hash, signal) => {
  return customFetch({
    url: `/v1/transactions/status/${network}/${hash}`,
    method: "GET",
    signal
  });
};
var getTransactionGetTransactionStatusByNetworkAndHashQueryKey = (network, hash) => {
  return [`/v1/transactions/status/${network}/${hash}`];
};
var getTransactionGetTransactionStatusByNetworkAndHashQueryOptions = (network, hash, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getTransactionGetTransactionStatusByNetworkAndHashQueryKey(network, hash);
  const queryFn = ({ signal }) => transactionGetTransactionStatusByNetworkAndHash(network, hash, signal);
  return {
    queryKey,
    queryFn,
    enabled: !!(network && hash),
    ...queryOptions
  };
};
var useTransactionGetTransactionStatusByNetworkAndHash = (network, hash, options) => {
  const queryOptions = getTransactionGetTransactionStatusByNetworkAndHashQueryOptions(
    network,
    hash,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var transactionGetTransactionVerificationMessageForNetwork = (network, transactionVerificationMessageRequestDto) => {
  return customFetch({
    url: `/v1/transactions/verification/${network}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: transactionVerificationMessageRequestDto
  });
};
var getTransactionGetTransactionVerificationMessageForNetworkMutationOptions = (options) => {
  const { mutation: mutationOptions } = options ?? {};
  const mutationFn = (props) => {
    const { network, data } = props ?? {};
    return transactionGetTransactionVerificationMessageForNetwork(
      network,
      data
    );
  };
  return { mutationFn, ...mutationOptions };
};
var useTransactionGetTransactionVerificationMessageForNetwork = (options) => {
  const mutationOptions = getTransactionGetTransactionVerificationMessageForNetworkMutationOptions(
    options
  );
  return useMutation(mutationOptions);
};
var tokenGetTokens = (params, signal) => {
  return customFetch({
    url: `/v1/tokens`,
    method: "GET",
    params,
    signal
  });
};
var getTokenGetTokensQueryKey = (params) => {
  return [`/v1/tokens`, ...params ? [params] : []];
};
var getTokenGetTokensQueryOptions = (params, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getTokenGetTokensQueryKey(params);
  const queryFn = ({
    signal
  }) => tokenGetTokens(params, signal);
  return { queryKey, queryFn, ...queryOptions };
};
var useTokenGetTokens = (params, options) => {
  const queryOptions = getTokenGetTokensQueryOptions(params, options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var tokenGetTokenPrices = (priceRequestDto) => {
  return customFetch({
    url: `/v1/tokens/prices`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: priceRequestDto
  });
};
var getTokenGetTokenPricesQueryKey = (priceRequestDto) => {
  return [`/v1/tokens/prices`, priceRequestDto];
};
var getTokenGetTokenPricesQueryOptions = (priceRequestDto, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getTokenGetTokenPricesQueryKey(priceRequestDto);
  const queryFn = () => tokenGetTokenPrices(priceRequestDto);
  return { queryKey, queryFn, ...queryOptions };
};
var useTokenGetTokenPrices = (priceRequestDto, options) => {
  const queryOptions = getTokenGetTokenPricesQueryOptions(
    priceRequestDto,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var tokenGetTokenBalances = (balancesRequestDto) => {
  return customFetch({
    url: `/v1/tokens/balances`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: balancesRequestDto
  });
};
var getTokenGetTokenBalancesQueryKey = (balancesRequestDto) => {
  return [`/v1/tokens/balances`, balancesRequestDto];
};
var getTokenGetTokenBalancesQueryOptions = (balancesRequestDto, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getTokenGetTokenBalancesQueryKey(balancesRequestDto);
  const queryFn = () => tokenGetTokenBalances(balancesRequestDto);
  return { queryKey, queryFn, ...queryOptions };
};
var useTokenGetTokenBalances = (balancesRequestDto, options) => {
  const queryOptions = getTokenGetTokenBalancesQueryOptions(
    balancesRequestDto,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var tokenTokenBalancesScan = (tokenBalanceScanDto) => {
  return customFetch({
    url: `/v1/tokens/balances/scan`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: tokenBalanceScanDto
  });
};
var getTokenTokenBalancesScanQueryKey = (tokenBalanceScanDto) => {
  return [`/v1/tokens/balances/scan`, tokenBalanceScanDto];
};
var getTokenTokenBalancesScanQueryOptions = (tokenBalanceScanDto, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getTokenTokenBalancesScanQueryKey(tokenBalanceScanDto);
  const queryFn = () => tokenTokenBalancesScan(tokenBalanceScanDto);
  return { queryKey, queryFn, ...queryOptions };
};
var useTokenTokenBalancesScan = (tokenBalanceScanDto, options) => {
  const queryOptions = getTokenTokenBalancesScanQueryOptions(
    tokenBalanceScanDto,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldYields = (params, signal) => {
  return customFetch({
    url: `/v1/yields`,
    method: "GET",
    params,
    signal
  });
};
var getYieldYieldsQueryKey = (params) => {
  return [`/v1/yields`, ...params ? [params] : []];
};
var getYieldYieldsQueryOptions = (params, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldYieldsQueryKey(params);
  const queryFn = ({
    signal
  }) => yieldYields(params, signal);
  return { queryKey, queryFn, ...queryOptions };
};
var useYieldYields = (params, options) => {
  const queryOptions = getYieldYieldsQueryOptions(params, options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldGetMultipleYieldBalances = (yieldBalanceWithIntegrationIdRequestDto) => {
  return customFetch({
    url: `/v1/yields/balances`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: yieldBalanceWithIntegrationIdRequestDto
  });
};
var getYieldGetMultipleYieldBalancesQueryKey = (yieldBalanceWithIntegrationIdRequestDto) => {
  return [
    `/v1/yields/balances`,
    yieldBalanceWithIntegrationIdRequestDto
  ];
};
var getYieldGetMultipleYieldBalancesQueryOptions = (yieldBalanceWithIntegrationIdRequestDto, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldGetMultipleYieldBalancesQueryKey(
    yieldBalanceWithIntegrationIdRequestDto
  );
  const queryFn = () => yieldGetMultipleYieldBalances(yieldBalanceWithIntegrationIdRequestDto);
  return { queryKey, queryFn, ...queryOptions };
};
var useYieldGetMultipleYieldBalances = (yieldBalanceWithIntegrationIdRequestDto, options) => {
  const queryOptions = getYieldGetMultipleYieldBalancesQueryOptions(
    yieldBalanceWithIntegrationIdRequestDto,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldYieldBalancesScan = (yieldBalanceScanRequestDto) => {
  return customFetch({
    url: `/v1/yields/balances/scan`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: yieldBalanceScanRequestDto
  });
};
var getYieldYieldBalancesScanQueryKey = (yieldBalanceScanRequestDto) => {
  return [`/v1/yields/balances/scan`, yieldBalanceScanRequestDto];
};
var getYieldYieldBalancesScanQueryOptions = (yieldBalanceScanRequestDto, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldYieldBalancesScanQueryKey(yieldBalanceScanRequestDto);
  const queryFn = () => yieldYieldBalancesScan(yieldBalanceScanRequestDto);
  return { queryKey, queryFn, ...queryOptions };
};
var useYieldYieldBalancesScan = (yieldBalanceScanRequestDto, options) => {
  const queryOptions = getYieldYieldBalancesScanQueryOptions(
    yieldBalanceScanRequestDto,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldYieldBalancesScanEvm = (yieldBalanceScanEvmRequestDto) => {
  return customFetch({
    url: `/v1/yields/balances/scan/evm`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: yieldBalanceScanEvmRequestDto
  });
};
var getYieldYieldBalancesScanEvmMutationOptions = (options) => {
  const { mutation: mutationOptions } = options ?? {};
  const mutationFn = (props) => {
    const { data } = props ?? {};
    return yieldYieldBalancesScanEvm(data);
  };
  return { mutationFn, ...mutationOptions };
};
var useYieldYieldBalancesScanEvm = (options) => {
  const mutationOptions = getYieldYieldBalancesScanEvmMutationOptions(options);
  return useMutation(mutationOptions);
};
var yieldGetMyYields = (params, signal) => {
  return customFetch({
    url: `/v1/yields/enabled`,
    method: "GET",
    params,
    signal
  });
};
var getYieldGetMyYieldsQueryKey = (params) => {
  return [`/v1/yields/enabled`, ...params ? [params] : []];
};
var getYieldGetMyYieldsQueryOptions = (params, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldGetMyYieldsQueryKey(params);
  const queryFn = ({ signal }) => yieldGetMyYields(params, signal);
  return { queryKey, queryFn, ...queryOptions };
};
var useYieldGetMyYields = (params, options) => {
  const queryOptions = getYieldGetMyYieldsQueryOptions(params, options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldGetMyNetworks = (signal) => {
  return customFetch({
    url: `/v1/yields/enabled/networks`,
    method: "GET",
    signal
  });
};
var getYieldGetMyNetworksQueryKey = () => {
  return [`/v1/yields/enabled/networks`];
};
var getYieldGetMyNetworksQueryOptions = (options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldGetMyNetworksQueryKey();
  const queryFn = ({ signal }) => yieldGetMyNetworks(signal);
  return { queryKey, queryFn, ...queryOptions };
};
var useYieldGetMyNetworks = (options) => {
  const queryOptions = getYieldGetMyNetworksQueryOptions(options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldFindValidators = (params, signal) => {
  return customFetch({
    url: `/v1/yields/validators`,
    method: "GET",
    params,
    signal
  });
};
var getYieldFindValidatorsQueryKey = (params) => {
  return [`/v1/yields/validators`, ...params ? [params] : []];
};
var getYieldFindValidatorsQueryOptions = (params, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldFindValidatorsQueryKey(params);
  const queryFn = ({ signal }) => yieldFindValidators(params, signal);
  return { queryKey, queryFn, ...queryOptions };
};
var useYieldFindValidators = (params, options) => {
  const queryOptions = getYieldFindValidatorsQueryOptions(params, options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldYieldOpportunity = (integrationId, params, signal) => {
  return customFetch({
    url: `/v1/yields/${integrationId}`,
    method: "GET",
    params,
    signal
  });
};
var getYieldYieldOpportunityQueryKey = (integrationId, params) => {
  return [`/v1/yields/${integrationId}`, ...params ? [params] : []];
};
var getYieldYieldOpportunityQueryOptions = (integrationId, params, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldYieldOpportunityQueryKey(integrationId, params);
  const queryFn = ({ signal }) => yieldYieldOpportunity(integrationId, params, signal);
  return {
    queryKey,
    queryFn,
    enabled: !!integrationId,
    ...queryOptions
  };
};
var useYieldYieldOpportunity = (integrationId, params, options) => {
  const queryOptions = getYieldYieldOpportunityQueryOptions(
    integrationId,
    params,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldGetValidators = (integrationId, params, signal) => {
  return customFetch({
    url: `/v1/yields/${integrationId}/validators`,
    method: "GET",
    params,
    signal
  });
};
var getYieldGetValidatorsQueryKey = (integrationId, params) => {
  return [
    `/v1/yields/${integrationId}/validators`,
    ...params ? [params] : []
  ];
};
var getYieldGetValidatorsQueryOptions = (integrationId, params, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldGetValidatorsQueryKey(integrationId, params);
  const queryFn = ({ signal }) => yieldGetValidators(integrationId, params, signal);
  return {
    queryKey,
    queryFn,
    enabled: !!integrationId,
    ...queryOptions
  };
};
var useYieldGetValidators = (integrationId, params, options) => {
  const queryOptions = getYieldGetValidatorsQueryOptions(
    integrationId,
    params,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldGetSingleYieldBalances = (integrationId, yieldBalanceRequestDto, params) => {
  return customFetch({
    url: `/v1/yields/${integrationId}/balances`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: yieldBalanceRequestDto,
    params
  });
};
var getYieldGetSingleYieldBalancesQueryKey = (integrationId, yieldBalanceRequestDto, params) => {
  return [
    `/v1/yields/${integrationId}/balances`,
    ...params ? [params] : [],
    yieldBalanceRequestDto
  ];
};
var getYieldGetSingleYieldBalancesQueryOptions = (integrationId, yieldBalanceRequestDto, params, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldGetSingleYieldBalancesQueryKey(
    integrationId,
    yieldBalanceRequestDto,
    params
  );
  const queryFn = () => yieldGetSingleYieldBalances(integrationId, yieldBalanceRequestDto, params);
  return {
    queryKey,
    queryFn,
    enabled: !!integrationId,
    ...queryOptions
  };
};
var useYieldGetSingleYieldBalances = (integrationId, yieldBalanceRequestDto, params, options) => {
  const queryOptions = getYieldGetSingleYieldBalancesQueryOptions(
    integrationId,
    yieldBalanceRequestDto,
    params,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldGetSingleYieldRewardsSummary = (integrationId, yieldRewardsSummaryRequestDto) => {
  return customFetch({
    url: `/v1/yields/${integrationId}/rewards-summary`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: yieldRewardsSummaryRequestDto
  });
};
var getYieldGetSingleYieldRewardsSummaryMutationOptions = (options) => {
  const { mutation: mutationOptions } = options ?? {};
  const mutationFn = (props) => {
    const { integrationId, data } = props ?? {};
    return yieldGetSingleYieldRewardsSummary(integrationId, data);
  };
  return { mutationFn, ...mutationOptions };
};
var useYieldGetSingleYieldRewardsSummary = (options) => {
  const mutationOptions = getYieldGetSingleYieldRewardsSummaryMutationOptions(options);
  return useMutation(mutationOptions);
};
var yieldGetFeeConfiguration = (integrationId, signal) => {
  return customFetch({
    url: `/v1/yields/${integrationId}/fee-configuration`,
    method: "GET",
    signal
  });
};
var getYieldGetFeeConfigurationQueryKey = (integrationId) => {
  return [`/v1/yields/${integrationId}/fee-configuration`];
};
var getYieldGetFeeConfigurationQueryOptions = (integrationId, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldGetFeeConfigurationQueryKey(integrationId);
  const queryFn = ({ signal }) => yieldGetFeeConfiguration(integrationId, signal);
  return {
    queryKey,
    queryFn,
    enabled: !!integrationId,
    ...queryOptions
  };
};
var useYieldGetFeeConfiguration = (integrationId, options) => {
  const queryOptions = getYieldGetFeeConfigurationQueryOptions(
    integrationId,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldV2Yields = (params, signal) => {
  return customFetch({
    url: `/v2/yields`,
    method: "GET",
    params,
    signal
  });
};
var getYieldV2YieldsQueryKey = (params) => {
  return [`/v2/yields`, ...params ? [params] : []];
};
var getYieldV2YieldsQueryOptions = (params, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldV2YieldsQueryKey(params);
  const queryFn = ({
    signal
  }) => yieldV2Yields(params, signal);
  return { queryKey, queryFn, ...queryOptions };
};
var useYieldV2Yields = (params, options) => {
  const queryOptions = getYieldV2YieldsQueryOptions(params, options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldV2GetYieldById = (yieldId, signal) => {
  return customFetch({
    url: `/v2/yields/${yieldId}`,
    method: "GET",
    signal
  });
};
var getYieldV2GetYieldByIdQueryKey = (yieldId) => {
  return [`/v2/yields/${yieldId}`];
};
var getYieldV2GetYieldByIdQueryOptions = (yieldId, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldV2GetYieldByIdQueryKey(yieldId);
  const queryFn = ({ signal }) => yieldV2GetYieldById(yieldId, signal);
  return {
    queryKey,
    queryFn,
    enabled: !!yieldId,
    ...queryOptions
  };
};
var useYieldV2GetYieldById = (yieldId, options) => {
  const queryOptions = getYieldV2GetYieldByIdQueryOptions(yieldId, options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldV2FindYieldValidators = (yieldId, params, signal) => {
  return customFetch({
    url: `/v2/yields/${yieldId}/validators`,
    method: "GET",
    params,
    signal
  });
};
var getYieldV2FindYieldValidatorsQueryKey = (yieldId, params) => {
  return [
    `/v2/yields/${yieldId}/validators`,
    ...params ? [params] : []
  ];
};
var getYieldV2FindYieldValidatorsQueryOptions = (yieldId, params, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldV2FindYieldValidatorsQueryKey(yieldId, params);
  const queryFn = ({ signal }) => yieldV2FindYieldValidators(yieldId, params, signal);
  return {
    queryKey,
    queryFn,
    enabled: !!yieldId,
    ...queryOptions
  };
};
var useYieldV2FindYieldValidators = (yieldId, params, options) => {
  const queryOptions = getYieldV2FindYieldValidatorsQueryOptions(
    yieldId,
    params,
    options
  );
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};
var yieldV2FindValidators = (params, signal) => {
  return customFetch({
    url: `/v2/yields/validators`,
    method: "GET",
    params,
    signal
  });
};
var getYieldV2FindValidatorsQueryKey = (params) => {
  return [`/v2/yields/validators`, ...params ? [params] : []];
};
var getYieldV2FindValidatorsQueryOptions = (params, options) => {
  const { query: queryOptions } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getYieldV2FindValidatorsQueryKey(params);
  const queryFn = ({ signal }) => yieldV2FindValidators(params, signal);
  return { queryKey, queryFn, ...queryOptions };
};
var useYieldV2FindValidators = (params, options) => {
  const queryOptions = getYieldV2FindValidatorsQueryOptions(params, options);
  const query = useQuery(queryOptions);
  query.queryKey = queryOptions.queryKey;
  return query;
};

export { StakeKitApiClient, actionEnter, actionEnterGasEstimation, actionExit, actionExitGasEstimate, actionGetAction, actionGetGasEstimate, actionList, actionPending, actionPendingGasEstimate, getActionEnterGasEstimationQueryKey, getActionEnterGasEstimationQueryOptions, getActionEnterMutationOptions, getActionExitGasEstimateQueryKey, getActionExitGasEstimateQueryOptions, getActionExitMutationOptions, getActionGetActionQueryKey, getActionGetActionQueryOptions, getActionGetGasEstimateQueryKey, getActionGetGasEstimateQueryOptions, getActionListQueryKey, getActionListQueryOptions, getActionPendingGasEstimateQueryKey, getActionPendingGasEstimateQueryOptions, getActionPendingMutationOptions, getHealthHealthV2QueryKey, getHealthHealthV2QueryOptions, getTokenGetTokenBalancesQueryKey, getTokenGetTokenBalancesQueryOptions, getTokenGetTokenPricesQueryKey, getTokenGetTokenPricesQueryOptions, getTokenGetTokensQueryKey, getTokenGetTokensQueryOptions, getTokenTokenBalancesScanQueryKey, getTokenTokenBalancesScanQueryOptions, getTransactionConstructMutationOptions, getTransactionGetGasForNetworkQueryKey, getTransactionGetGasForNetworkQueryOptions, getTransactionGetTransactionQueryKey, getTransactionGetTransactionQueryOptions, getTransactionGetTransactionStatusByNetworkAndHashQueryKey, getTransactionGetTransactionStatusByNetworkAndHashQueryOptions, getTransactionGetTransactionStatusFromIdQueryKey, getTransactionGetTransactionStatusFromIdQueryOptions, getTransactionGetTransactionVerificationMessageForNetworkMutationOptions, getTransactionSubmitHashMutationOptions, getTransactionSubmitMutationOptions, getYieldFindValidatorsQueryKey, getYieldFindValidatorsQueryOptions, getYieldGetFeeConfigurationQueryKey, getYieldGetFeeConfigurationQueryOptions, getYieldGetMultipleYieldBalancesQueryKey, getYieldGetMultipleYieldBalancesQueryOptions, getYieldGetMyNetworksQueryKey, getYieldGetMyNetworksQueryOptions, getYieldGetMyYieldsQueryKey, getYieldGetMyYieldsQueryOptions, getYieldGetSingleYieldBalancesQueryKey, getYieldGetSingleYieldBalancesQueryOptions, getYieldGetSingleYieldRewardsSummaryMutationOptions, getYieldGetValidatorsQueryKey, getYieldGetValidatorsQueryOptions, getYieldV2FindValidatorsQueryKey, getYieldV2FindValidatorsQueryOptions, getYieldV2FindYieldValidatorsQueryKey, getYieldV2FindYieldValidatorsQueryOptions, getYieldV2GetYieldByIdQueryKey, getYieldV2GetYieldByIdQueryOptions, getYieldV2YieldsQueryKey, getYieldV2YieldsQueryOptions, getYieldYieldBalancesScanEvmMutationOptions, getYieldYieldBalancesScanQueryKey, getYieldYieldBalancesScanQueryOptions, getYieldYieldOpportunityQueryKey, getYieldYieldOpportunityQueryOptions, getYieldYieldsQueryKey, getYieldYieldsQueryOptions, healthHealthV2, tokenGetTokenBalances, tokenGetTokenPrices, tokenGetTokens, tokenTokenBalancesScan, transactionConstruct, transactionGetGasForNetwork, transactionGetTransaction, transactionGetTransactionStatusByNetworkAndHash, transactionGetTransactionStatusFromId, transactionGetTransactionVerificationMessageForNetwork, transactionSubmit, transactionSubmitHash, useActionEnter, useActionEnterGasEstimation, useActionExit, useActionExitGasEstimate, useActionGetAction, useActionGetGasEstimate, useActionList, useActionPending, useActionPendingGasEstimate, useHealthHealthV2, useTokenGetTokenBalances, useTokenGetTokenPrices, useTokenGetTokens, useTokenTokenBalancesScan, useTransactionConstruct, useTransactionGetGasForNetwork, useTransactionGetTransaction, useTransactionGetTransactionStatusByNetworkAndHash, useTransactionGetTransactionStatusFromId, useTransactionGetTransactionVerificationMessageForNetwork, useTransactionSubmit, useTransactionSubmitHash, useYieldFindValidators, useYieldGetFeeConfiguration, useYieldGetMultipleYieldBalances, useYieldGetMyNetworks, useYieldGetMyYields, useYieldGetSingleYieldBalances, useYieldGetSingleYieldRewardsSummary, useYieldGetValidators, useYieldV2FindValidators, useYieldV2FindYieldValidators, useYieldV2GetYieldById, useYieldV2Yields, useYieldYieldBalancesScan, useYieldYieldBalancesScanEvm, useYieldYieldOpportunity, useYieldYields, yieldFindValidators, yieldGetFeeConfiguration, yieldGetMultipleYieldBalances, yieldGetMyNetworks, yieldGetMyYields, yieldGetSingleYieldBalances, yieldGetSingleYieldRewardsSummary, yieldGetValidators, yieldV2FindValidators, yieldV2FindYieldValidators, yieldV2GetYieldById, yieldV2Yields, yieldYieldBalancesScan, yieldYieldBalancesScanEvm, yieldYieldOpportunity, yieldYields };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map