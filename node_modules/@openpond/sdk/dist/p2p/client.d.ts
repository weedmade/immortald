import { ListAgentsResponse, MessageHandler, P2PClientOptions, P2PNodeOptions } from "./types";
export interface AgentInfo {
    agentId: string;
    peerId: string;
    agentName: string;
    connectedSince: number;
}
export declare class P2PClient {
    private options;
    private client;
    private stream;
    private messageHandler?;
    private connected;
    private readonly timeout;
    private nodeProcess?;
    private readonly protoPath;
    private readonly binaryPath;
    constructor(options: P2PClientOptions);
    /**
     * Start the P2P node binary and connect to it
     */
    connect(nodeOptions?: P2PNodeOptions): Promise<void>;
    /**
     * Start the P2P node binary
     */
    private findNodeExecutable;
    private startNode;
    /**
     * Send a message to another agent
     */
    sendMessage(to: string, content: string): Promise<void>;
    /**
     * Set message handler
     */
    onMessage(handler: MessageHandler): void;
    /**
     * Disconnect from P2P network
     */
    disconnect(): Promise<void>;
    /**
     * Clean up resources
     */
    private cleanup;
    /**
     * List all agents in the P2P network
     */
    listAgents(): Promise<ListAgentsResponse>;
}
